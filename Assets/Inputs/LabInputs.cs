//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Inputs/LabInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @LabInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @LabInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""LabInputs"",
    ""maps"": [
        {
            ""name"": ""SettingsScreen"",
            ""id"": ""9498d387-33a9-4e72-a830-d6f68ff08546"",
            ""actions"": [
                {
                    ""name"": ""SettingsScreen_Close"",
                    ""type"": ""Button"",
                    ""id"": ""657a44ce-5f3c-4046-8c95-1c9eca2269cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30cc4392-ba7d-4c45-8bf6-2a3bb002a8ea"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SettingsScreen_Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""adc2d218-e6f6-4c3a-a64a-b7f08df831b9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SettingsScreen_Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Lab"",
            ""id"": ""21a33038-7127-484d-ad78-bb4c94ef4116"",
            ""actions"": [
                {
                    ""name"": ""Lab_Settings"",
                    ""type"": ""Button"",
                    ""id"": ""38659155-2f90-4dc0-8374-3e8b00d71c4a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fd452e17-cf59-4d45-b202-991011c03560"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lab_Settings"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Selected"",
            ""id"": ""00fa29b5-9680-44d8-9f79-faba3546de57"",
            ""actions"": [
                {
                    ""name"": ""Selected_Back"",
                    ""type"": ""Button"",
                    ""id"": ""100c7510-2762-4c6a-a459-ff45a68f20cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""13b59856-5cab-41c4-8178-42db2eebddaa"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selected_Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Terrarium"",
            ""id"": ""7a0a0da8-c07c-4623-978c-ae62f59872c7"",
            ""actions"": [
                {
                    ""name"": ""Terrarium_Back"",
                    ""type"": ""Button"",
                    ""id"": ""357d9c41-372b-4030-863b-f9ce52f0fa8e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4f33ca8d-d016-493a-9507-c71f454b7a03"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Terrarium_Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73655634-2f89-4762-ac44-3a7e5fca698c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Terrarium_Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SettingsScreen
        m_SettingsScreen = asset.FindActionMap("SettingsScreen", throwIfNotFound: true);
        m_SettingsScreen_SettingsScreen_Close = m_SettingsScreen.FindAction("SettingsScreen_Close", throwIfNotFound: true);
        // Lab
        m_Lab = asset.FindActionMap("Lab", throwIfNotFound: true);
        m_Lab_Lab_Settings = m_Lab.FindAction("Lab_Settings", throwIfNotFound: true);
        // Selected
        m_Selected = asset.FindActionMap("Selected", throwIfNotFound: true);
        m_Selected_Selected_Back = m_Selected.FindAction("Selected_Back", throwIfNotFound: true);
        // Terrarium
        m_Terrarium = asset.FindActionMap("Terrarium", throwIfNotFound: true);
        m_Terrarium_Terrarium_Back = m_Terrarium.FindAction("Terrarium_Back", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SettingsScreen
    private readonly InputActionMap m_SettingsScreen;
    private List<ISettingsScreenActions> m_SettingsScreenActionsCallbackInterfaces = new List<ISettingsScreenActions>();
    private readonly InputAction m_SettingsScreen_SettingsScreen_Close;
    public struct SettingsScreenActions
    {
        private @LabInputs m_Wrapper;
        public SettingsScreenActions(@LabInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @SettingsScreen_Close => m_Wrapper.m_SettingsScreen_SettingsScreen_Close;
        public InputActionMap Get() { return m_Wrapper.m_SettingsScreen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SettingsScreenActions set) { return set.Get(); }
        public void AddCallbacks(ISettingsScreenActions instance)
        {
            if (instance == null || m_Wrapper.m_SettingsScreenActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SettingsScreenActionsCallbackInterfaces.Add(instance);
            @SettingsScreen_Close.started += instance.OnSettingsScreen_Close;
            @SettingsScreen_Close.performed += instance.OnSettingsScreen_Close;
            @SettingsScreen_Close.canceled += instance.OnSettingsScreen_Close;
        }

        private void UnregisterCallbacks(ISettingsScreenActions instance)
        {
            @SettingsScreen_Close.started -= instance.OnSettingsScreen_Close;
            @SettingsScreen_Close.performed -= instance.OnSettingsScreen_Close;
            @SettingsScreen_Close.canceled -= instance.OnSettingsScreen_Close;
        }

        public void RemoveCallbacks(ISettingsScreenActions instance)
        {
            if (m_Wrapper.m_SettingsScreenActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISettingsScreenActions instance)
        {
            foreach (var item in m_Wrapper.m_SettingsScreenActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SettingsScreenActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SettingsScreenActions @SettingsScreen => new SettingsScreenActions(this);

    // Lab
    private readonly InputActionMap m_Lab;
    private List<ILabActions> m_LabActionsCallbackInterfaces = new List<ILabActions>();
    private readonly InputAction m_Lab_Lab_Settings;
    public struct LabActions
    {
        private @LabInputs m_Wrapper;
        public LabActions(@LabInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Lab_Settings => m_Wrapper.m_Lab_Lab_Settings;
        public InputActionMap Get() { return m_Wrapper.m_Lab; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LabActions set) { return set.Get(); }
        public void AddCallbacks(ILabActions instance)
        {
            if (instance == null || m_Wrapper.m_LabActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LabActionsCallbackInterfaces.Add(instance);
            @Lab_Settings.started += instance.OnLab_Settings;
            @Lab_Settings.performed += instance.OnLab_Settings;
            @Lab_Settings.canceled += instance.OnLab_Settings;
        }

        private void UnregisterCallbacks(ILabActions instance)
        {
            @Lab_Settings.started -= instance.OnLab_Settings;
            @Lab_Settings.performed -= instance.OnLab_Settings;
            @Lab_Settings.canceled -= instance.OnLab_Settings;
        }

        public void RemoveCallbacks(ILabActions instance)
        {
            if (m_Wrapper.m_LabActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILabActions instance)
        {
            foreach (var item in m_Wrapper.m_LabActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LabActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LabActions @Lab => new LabActions(this);

    // Selected
    private readonly InputActionMap m_Selected;
    private List<ISelectedActions> m_SelectedActionsCallbackInterfaces = new List<ISelectedActions>();
    private readonly InputAction m_Selected_Selected_Back;
    public struct SelectedActions
    {
        private @LabInputs m_Wrapper;
        public SelectedActions(@LabInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Selected_Back => m_Wrapper.m_Selected_Selected_Back;
        public InputActionMap Get() { return m_Wrapper.m_Selected; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectedActions set) { return set.Get(); }
        public void AddCallbacks(ISelectedActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectedActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectedActionsCallbackInterfaces.Add(instance);
            @Selected_Back.started += instance.OnSelected_Back;
            @Selected_Back.performed += instance.OnSelected_Back;
            @Selected_Back.canceled += instance.OnSelected_Back;
        }

        private void UnregisterCallbacks(ISelectedActions instance)
        {
            @Selected_Back.started -= instance.OnSelected_Back;
            @Selected_Back.performed -= instance.OnSelected_Back;
            @Selected_Back.canceled -= instance.OnSelected_Back;
        }

        public void RemoveCallbacks(ISelectedActions instance)
        {
            if (m_Wrapper.m_SelectedActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISelectedActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectedActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectedActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SelectedActions @Selected => new SelectedActions(this);

    // Terrarium
    private readonly InputActionMap m_Terrarium;
    private List<ITerrariumActions> m_TerrariumActionsCallbackInterfaces = new List<ITerrariumActions>();
    private readonly InputAction m_Terrarium_Terrarium_Back;
    public struct TerrariumActions
    {
        private @LabInputs m_Wrapper;
        public TerrariumActions(@LabInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Terrarium_Back => m_Wrapper.m_Terrarium_Terrarium_Back;
        public InputActionMap Get() { return m_Wrapper.m_Terrarium; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TerrariumActions set) { return set.Get(); }
        public void AddCallbacks(ITerrariumActions instance)
        {
            if (instance == null || m_Wrapper.m_TerrariumActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TerrariumActionsCallbackInterfaces.Add(instance);
            @Terrarium_Back.started += instance.OnTerrarium_Back;
            @Terrarium_Back.performed += instance.OnTerrarium_Back;
            @Terrarium_Back.canceled += instance.OnTerrarium_Back;
        }

        private void UnregisterCallbacks(ITerrariumActions instance)
        {
            @Terrarium_Back.started -= instance.OnTerrarium_Back;
            @Terrarium_Back.performed -= instance.OnTerrarium_Back;
            @Terrarium_Back.canceled -= instance.OnTerrarium_Back;
        }

        public void RemoveCallbacks(ITerrariumActions instance)
        {
            if (m_Wrapper.m_TerrariumActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITerrariumActions instance)
        {
            foreach (var item in m_Wrapper.m_TerrariumActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TerrariumActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TerrariumActions @Terrarium => new TerrariumActions(this);
    public interface ISettingsScreenActions
    {
        void OnSettingsScreen_Close(InputAction.CallbackContext context);
    }
    public interface ILabActions
    {
        void OnLab_Settings(InputAction.CallbackContext context);
    }
    public interface ISelectedActions
    {
        void OnSelected_Back(InputAction.CallbackContext context);
    }
    public interface ITerrariumActions
    {
        void OnTerrarium_Back(InputAction.CallbackContext context);
    }
}
