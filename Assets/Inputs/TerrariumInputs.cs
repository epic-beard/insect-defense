//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Inputs/TerrariumInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TerrariumInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TerrariumInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TerrariumInputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""828dc39d-cd1c-41ae-859d-97917a02e89c"",
            ""actions"": [
                {
                    ""name"": ""Player_Look"",
                    ""type"": ""Value"",
                    ""id"": ""570b2447-e43b-4512-86bc-df9f003a469b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Player_Pause"",
                    ""type"": ""Button"",
                    ""id"": ""15f17a7c-cc69-4d49-b6c1-4a3472c0301b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Player_Settings"",
                    ""type"": ""Button"",
                    ""id"": ""90d4bd21-6131-43f9-b840-d0053724b92c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Player_Deselect"",
                    ""type"": ""Button"",
                    ""id"": ""de95a48e-cca3-47e5-8cd0-e30ae2f5f8cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Player_Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""ea7c22c3-3963-43bb-9f8f-ad4ade8997c8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Player_Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""808ef93f-176f-4695-9cf2-dd26156b6f7b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Player_Camera_Home"",
                    ""type"": ""Button"",
                    ""id"": ""f645af20-b4d1-451b-b38b-71b4fe605c62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6205db0c-d6f2-432e-af6d-11ad351882ac"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8418f1b5-9ce5-42a3-93a1-99a5ae296caa"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Settings"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""48c2f938-29c7-4fe1-b3ea-57c2a9c19580"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Look"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""9d732597-5598-4b46-9ae3-aa5d3677accd"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""31040fe8-95e5-4f2b-b335-472cee8a5fcb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""a3ab8808-6f1c-4918-820e-e03487f43331"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""f1396980-ba88-4f7a-82d0-606eabc91e94"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""8b24deb5-5f74-44c8-ab43-b6d6a1fa9f16"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""0419fb02-5c1f-4c2b-94c1-4c359746af1a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""4e8c431e-9a8d-45d7-9a06-68516518c9df"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""55f74bc0-dcee-4da4-9fb2-293727a15481"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0fa80bb4-5696-4b5c-a079-78053a0241d7"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c94a7ad-d48e-49f2-8182-ae3d94ecbfa3"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""cdc80214-539d-4452-a97b-c9f9ddb92818"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""30338dac-10ee-4ff5-bed7-b8279f38acd7"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a9544496-49b1-4939-afbb-b01c27a0503d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""797436f0-5b7e-4acd-a782-1fb12b235e3c"",
                    ""path"": ""<Keyboard>/home"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Camera_Home"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SettingsScreen"",
            ""id"": ""9498d387-33a9-4e72-a830-d6f68ff08546"",
            ""actions"": [
                {
                    ""name"": ""SettingsScreen_Close"",
                    ""type"": ""Button"",
                    ""id"": ""657a44ce-5f3c-4046-8c95-1c9eca2269cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30cc4392-ba7d-4c45-8bf6-2a3bb002a8ea"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SettingsScreen_Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18f5ae9d-b4f8-4294-bc56-aec9dc7b5afa"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SettingsScreen_Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MessageBox"",
            ""id"": ""868b74e1-8839-4e16-a148-64c05f49e179"",
            ""actions"": [
                {
                    ""name"": ""Settings"",
                    ""type"": ""Button"",
                    ""id"": ""451a86b0-cb4b-437a-bbc1-6ca25c4194a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Advance"",
                    ""type"": ""Button"",
                    ""id"": ""f752bcb2-5baf-4a70-a0f9-5ed0edb9ce31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8e8dc225-d708-4b61-bdcc-743807b578e1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Settings"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""220b9f57-e8ea-48cb-8192-17d87d399bd7"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Advance"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6889a388-9f31-4a4d-9030-cd5d85bc9103"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Advance"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Player_Look = m_Player.FindAction("Player_Look", throwIfNotFound: true);
        m_Player_Player_Pause = m_Player.FindAction("Player_Pause", throwIfNotFound: true);
        m_Player_Player_Settings = m_Player.FindAction("Player_Settings", throwIfNotFound: true);
        m_Player_Player_Deselect = m_Player.FindAction("Player_Deselect", throwIfNotFound: true);
        m_Player_Player_Zoom = m_Player.FindAction("Player_Zoom", throwIfNotFound: true);
        m_Player_Player_Rotate = m_Player.FindAction("Player_Rotate", throwIfNotFound: true);
        m_Player_Player_Camera_Home = m_Player.FindAction("Player_Camera_Home", throwIfNotFound: true);
        // SettingsScreen
        m_SettingsScreen = asset.FindActionMap("SettingsScreen", throwIfNotFound: true);
        m_SettingsScreen_SettingsScreen_Close = m_SettingsScreen.FindAction("SettingsScreen_Close", throwIfNotFound: true);
        // MessageBox
        m_MessageBox = asset.FindActionMap("MessageBox", throwIfNotFound: true);
        m_MessageBox_Settings = m_MessageBox.FindAction("Settings", throwIfNotFound: true);
        m_MessageBox_Advance = m_MessageBox.FindAction("Advance", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Player_Look;
    private readonly InputAction m_Player_Player_Pause;
    private readonly InputAction m_Player_Player_Settings;
    private readonly InputAction m_Player_Player_Deselect;
    private readonly InputAction m_Player_Player_Zoom;
    private readonly InputAction m_Player_Player_Rotate;
    private readonly InputAction m_Player_Player_Camera_Home;
    public struct PlayerActions
    {
        private @TerrariumInputs m_Wrapper;
        public PlayerActions(@TerrariumInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Player_Look => m_Wrapper.m_Player_Player_Look;
        public InputAction @Player_Pause => m_Wrapper.m_Player_Player_Pause;
        public InputAction @Player_Settings => m_Wrapper.m_Player_Player_Settings;
        public InputAction @Player_Deselect => m_Wrapper.m_Player_Player_Deselect;
        public InputAction @Player_Zoom => m_Wrapper.m_Player_Player_Zoom;
        public InputAction @Player_Rotate => m_Wrapper.m_Player_Player_Rotate;
        public InputAction @Player_Camera_Home => m_Wrapper.m_Player_Player_Camera_Home;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Player_Look.started += instance.OnPlayer_Look;
            @Player_Look.performed += instance.OnPlayer_Look;
            @Player_Look.canceled += instance.OnPlayer_Look;
            @Player_Pause.started += instance.OnPlayer_Pause;
            @Player_Pause.performed += instance.OnPlayer_Pause;
            @Player_Pause.canceled += instance.OnPlayer_Pause;
            @Player_Settings.started += instance.OnPlayer_Settings;
            @Player_Settings.performed += instance.OnPlayer_Settings;
            @Player_Settings.canceled += instance.OnPlayer_Settings;
            @Player_Deselect.started += instance.OnPlayer_Deselect;
            @Player_Deselect.performed += instance.OnPlayer_Deselect;
            @Player_Deselect.canceled += instance.OnPlayer_Deselect;
            @Player_Zoom.started += instance.OnPlayer_Zoom;
            @Player_Zoom.performed += instance.OnPlayer_Zoom;
            @Player_Zoom.canceled += instance.OnPlayer_Zoom;
            @Player_Rotate.started += instance.OnPlayer_Rotate;
            @Player_Rotate.performed += instance.OnPlayer_Rotate;
            @Player_Rotate.canceled += instance.OnPlayer_Rotate;
            @Player_Camera_Home.started += instance.OnPlayer_Camera_Home;
            @Player_Camera_Home.performed += instance.OnPlayer_Camera_Home;
            @Player_Camera_Home.canceled += instance.OnPlayer_Camera_Home;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Player_Look.started -= instance.OnPlayer_Look;
            @Player_Look.performed -= instance.OnPlayer_Look;
            @Player_Look.canceled -= instance.OnPlayer_Look;
            @Player_Pause.started -= instance.OnPlayer_Pause;
            @Player_Pause.performed -= instance.OnPlayer_Pause;
            @Player_Pause.canceled -= instance.OnPlayer_Pause;
            @Player_Settings.started -= instance.OnPlayer_Settings;
            @Player_Settings.performed -= instance.OnPlayer_Settings;
            @Player_Settings.canceled -= instance.OnPlayer_Settings;
            @Player_Deselect.started -= instance.OnPlayer_Deselect;
            @Player_Deselect.performed -= instance.OnPlayer_Deselect;
            @Player_Deselect.canceled -= instance.OnPlayer_Deselect;
            @Player_Zoom.started -= instance.OnPlayer_Zoom;
            @Player_Zoom.performed -= instance.OnPlayer_Zoom;
            @Player_Zoom.canceled -= instance.OnPlayer_Zoom;
            @Player_Rotate.started -= instance.OnPlayer_Rotate;
            @Player_Rotate.performed -= instance.OnPlayer_Rotate;
            @Player_Rotate.canceled -= instance.OnPlayer_Rotate;
            @Player_Camera_Home.started -= instance.OnPlayer_Camera_Home;
            @Player_Camera_Home.performed -= instance.OnPlayer_Camera_Home;
            @Player_Camera_Home.canceled -= instance.OnPlayer_Camera_Home;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // SettingsScreen
    private readonly InputActionMap m_SettingsScreen;
    private List<ISettingsScreenActions> m_SettingsScreenActionsCallbackInterfaces = new List<ISettingsScreenActions>();
    private readonly InputAction m_SettingsScreen_SettingsScreen_Close;
    public struct SettingsScreenActions
    {
        private @TerrariumInputs m_Wrapper;
        public SettingsScreenActions(@TerrariumInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @SettingsScreen_Close => m_Wrapper.m_SettingsScreen_SettingsScreen_Close;
        public InputActionMap Get() { return m_Wrapper.m_SettingsScreen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SettingsScreenActions set) { return set.Get(); }
        public void AddCallbacks(ISettingsScreenActions instance)
        {
            if (instance == null || m_Wrapper.m_SettingsScreenActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SettingsScreenActionsCallbackInterfaces.Add(instance);
            @SettingsScreen_Close.started += instance.OnSettingsScreen_Close;
            @SettingsScreen_Close.performed += instance.OnSettingsScreen_Close;
            @SettingsScreen_Close.canceled += instance.OnSettingsScreen_Close;
        }

        private void UnregisterCallbacks(ISettingsScreenActions instance)
        {
            @SettingsScreen_Close.started -= instance.OnSettingsScreen_Close;
            @SettingsScreen_Close.performed -= instance.OnSettingsScreen_Close;
            @SettingsScreen_Close.canceled -= instance.OnSettingsScreen_Close;
        }

        public void RemoveCallbacks(ISettingsScreenActions instance)
        {
            if (m_Wrapper.m_SettingsScreenActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISettingsScreenActions instance)
        {
            foreach (var item in m_Wrapper.m_SettingsScreenActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SettingsScreenActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SettingsScreenActions @SettingsScreen => new SettingsScreenActions(this);

    // MessageBox
    private readonly InputActionMap m_MessageBox;
    private List<IMessageBoxActions> m_MessageBoxActionsCallbackInterfaces = new List<IMessageBoxActions>();
    private readonly InputAction m_MessageBox_Settings;
    private readonly InputAction m_MessageBox_Advance;
    public struct MessageBoxActions
    {
        private @TerrariumInputs m_Wrapper;
        public MessageBoxActions(@TerrariumInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Settings => m_Wrapper.m_MessageBox_Settings;
        public InputAction @Advance => m_Wrapper.m_MessageBox_Advance;
        public InputActionMap Get() { return m_Wrapper.m_MessageBox; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MessageBoxActions set) { return set.Get(); }
        public void AddCallbacks(IMessageBoxActions instance)
        {
            if (instance == null || m_Wrapper.m_MessageBoxActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MessageBoxActionsCallbackInterfaces.Add(instance);
            @Settings.started += instance.OnSettings;
            @Settings.performed += instance.OnSettings;
            @Settings.canceled += instance.OnSettings;
            @Advance.started += instance.OnAdvance;
            @Advance.performed += instance.OnAdvance;
            @Advance.canceled += instance.OnAdvance;
        }

        private void UnregisterCallbacks(IMessageBoxActions instance)
        {
            @Settings.started -= instance.OnSettings;
            @Settings.performed -= instance.OnSettings;
            @Settings.canceled -= instance.OnSettings;
            @Advance.started -= instance.OnAdvance;
            @Advance.performed -= instance.OnAdvance;
            @Advance.canceled -= instance.OnAdvance;
        }

        public void RemoveCallbacks(IMessageBoxActions instance)
        {
            if (m_Wrapper.m_MessageBoxActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMessageBoxActions instance)
        {
            foreach (var item in m_Wrapper.m_MessageBoxActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MessageBoxActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MessageBoxActions @MessageBox => new MessageBoxActions(this);
    public interface IPlayerActions
    {
        void OnPlayer_Look(InputAction.CallbackContext context);
        void OnPlayer_Pause(InputAction.CallbackContext context);
        void OnPlayer_Settings(InputAction.CallbackContext context);
        void OnPlayer_Deselect(InputAction.CallbackContext context);
        void OnPlayer_Zoom(InputAction.CallbackContext context);
        void OnPlayer_Rotate(InputAction.CallbackContext context);
        void OnPlayer_Camera_Home(InputAction.CallbackContext context);
    }
    public interface ISettingsScreenActions
    {
        void OnSettingsScreen_Close(InputAction.CallbackContext context);
    }
    public interface IMessageBoxActions
    {
        void OnSettings(InputAction.CallbackContext context);
        void OnAdvance(InputAction.CallbackContext context);
    }
}
